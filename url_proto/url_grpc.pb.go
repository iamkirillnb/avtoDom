// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: url_proto/url.url_proto

package url_redirect

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UrlRedirectClient is the client API for UrlRedirect service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UrlRedirectClient interface {
	GetUrlOuter(ctx context.Context, in *GetUrlOuterRequest, opts ...grpc.CallOption) (*GetUrlOuterResponse, error)
}

type urlRedirectClient struct {
	cc grpc.ClientConnInterface
}

func NewUrlRedirectClient(cc grpc.ClientConnInterface) UrlRedirectClient {
	return &urlRedirectClient{cc}
}

func (c *urlRedirectClient) GetUrlOuter(ctx context.Context, in *GetUrlOuterRequest, opts ...grpc.CallOption) (*GetUrlOuterResponse, error) {
	out := new(GetUrlOuterResponse)
	err := c.cc.Invoke(ctx, "/url.UrlRedirect/GetUrlOuter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UrlRedirectServer is the server API for UrlRedirect service.
// All implementations should embed UnimplementedUrlRedirectServer
// for forward compatibility
type UrlRedirectServer interface {
	GetUrlOuter(context.Context, *GetUrlOuterRequest) (*GetUrlOuterResponse, error)
}

// UnimplementedUrlRedirectServer should be embedded to have forward compatible implementations.
type UnimplementedUrlRedirectServer struct {
}

func (UnimplementedUrlRedirectServer) GetUrlOuter(context.Context, *GetUrlOuterRequest) (*GetUrlOuterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUrlOuter not implemented")
}

// UnsafeUrlRedirectServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UrlRedirectServer will
// result in compilation errors.
type UnsafeUrlRedirectServer interface {
	mustEmbedUnimplementedUrlRedirectServer()
}

func RegisterUrlRedirectServer(s grpc.ServiceRegistrar, srv UrlRedirectServer) {
	s.RegisterService(&UrlRedirect_ServiceDesc, srv)
}

func _UrlRedirect_GetUrlOuter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUrlOuterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UrlRedirectServer).GetUrlOuter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/url.UrlRedirect/GetUrlOuter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UrlRedirectServer).GetUrlOuter(ctx, req.(*GetUrlOuterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UrlRedirect_ServiceDesc is the grpc.ServiceDesc for UrlRedirect service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UrlRedirect_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "url.UrlRedirect",
	HandlerType: (*UrlRedirectServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUrlOuter",
			Handler:    _UrlRedirect_GetUrlOuter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "url_proto/url.url_proto",
}
